{
  "info": {
    "name": "Authentication API Collection",
    "description": "Complete authentication operations including sign-up, sign-in, password management, and user profile",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Sign Up",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/sign-up",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "sign-up"]
        },
        "description": "Create a new user account with email and password"
      },
      "response": []
    },
    {
      "name": "Sign In",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/sign-in",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "sign-in"]
        },
        "description": "Authenticate user and get access token and refresh token"
      },
      "response": []
    },
    {
      "name": "Get User Profile (Me)",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/auth/me",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "me"]
        },
        "description": "Get current user profile information (requires authentication)"
      },
      "response": []
    },
    {
      "name": "Change Password",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"oldPassword\": \"password123\",\n  \"newPassword\": \"newpassword123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/change-password",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "change-password"]
        },
        "description": "Change user password (requires authentication)"
      },
      "response": []
    },
    {
      "name": "Refresh Tokens",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/refresh-tokens",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "refresh-tokens"]
        },
        "description": "Get new access token using refresh token"
      },
      "response": []
    },
    {
      "name": "Logout",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/auth/logout",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "logout"]
        },
        "description": "Logout user and invalidate tokens (requires authentication)"
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-extract tokens from sign-in response",
          "if (pm.info.requestName === 'Sign In') {",
          "    const response = pm.response.json();",
          "    if (response.accessToken) {",
          "        pm.collectionVariables.set('accessToken', response.accessToken);",
          "        console.log('Access Token extracted:', response.accessToken);",
          "    }",
          "    if (response.refreshToken) {",
          "        pm.collectionVariables.set('refreshToken', response.refreshToken);",
          "        console.log('Refresh Token extracted:', response.refreshToken);",
          "    }",
          "    if (response.user && response.user._id) {",
          "        pm.collectionVariables.set('userId', response.user._id);",
          "        console.log('User ID extracted:', response.user._id);",
          "    }",
          "}",
          "",
          "// Auto-extract new tokens from refresh response",
          "if (pm.info.requestName === 'Refresh Tokens') {",
          "    const response = pm.response.json();",
          "    if (response.accessToken) {",
          "        pm.collectionVariables.set('accessToken', response.accessToken);",
          "        console.log('New Access Token extracted:', response.accessToken);",
          "    }",
          "    if (response.refreshToken) {",
          "        pm.collectionVariables.set('refreshToken', response.refreshToken);",
          "        console.log('New Refresh Token extracted:', response.refreshToken);",
          "    }",
          "}",
          "",
          "// Test response status",
          "pm.test('Status code is 200 or 201', function () {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
          "});",
          "",
          "// Test response time",
          "pm.test('Response time is less than 2000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "// Test authentication endpoints",
          "if (pm.info.requestName === 'Sign In' || pm.info.requestName === 'Sign Up') {",
          "    pm.test('Response contains user data', function () {",
          "        const response = pm.response.json();",
          "        pm.expect(response).to.have.property('user');",
          "    });",
          "}",
          "",
          "if (pm.info.requestName === 'Sign In') {",
          "    pm.test('Response contains access token', function () {",
          "        const response = pm.response.json();",
          "        pm.expect(response).to.have.property('accessToken');",
          "    });",
          "    pm.test('Response contains refresh token', function () {",
          "        const response = pm.response.json();",
          "        pm.expect(response).to.have.property('refreshToken');",
          "    });",
          "}"
        ]
      }
    }
  ]
} 